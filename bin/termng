#! /usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var trucolor = require('trucolor');
var truwrap = require('truwrap');
var yargs = _interopDefault(require('yargs'));
var meta = _interopDefault(require('@thebespokepixel/meta'));
var updateNotifier = _interopDefault(require('update-notifier'));
var readPkg = _interopDefault(require('read-pkg'));

/* ────────╮
 │ Term-NG │ Next generation terminal detector
 ╰─────────┴─────────────────────────────────────────────────────────────────── */

/* eslint complexity:0 */
const itermSession = process.env.ITERM_SESSION_ID && process.env.ITERM_SESSION_ID.indexOf(':') > 0;
const termColor = process.env.TERM_COLOR && process.env.TERM_COLOR.indexOf('16m') >= 0;
const has16m = itermSession || termColor;

if (has16m && !/-color/.test(process.argv.join(''))) {
  process.argv.splice(2, 0, '--color=16m');
} // From https://github.com/sindresorhus/has-flag, under MIT license


const hasFlag = flag => {
  const terminatorPos = process.argv.indexOf('--');
  const prefix = /^-{1,2}/.test(flag) ? '' : '--';
  const pos = process.argv.indexOf(prefix + flag);
  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
}; // From https://github.com/chalk/supports-color, under MIT license


const support = level => {
  if (level === 0) {
    return false;
  }

  return {
    level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
};

let supportLevel = (() => {
  if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
    return 0;
  }

  if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
    return 3;
  }

  if (hasFlag('color=256')) {
    return 2;
  }

  if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
    return 1;
  }

  if (process.stdout && !process.stdout.isTTY) {
    return 0;
  }

  if (process.platform === 'win32') {
    return 1;
  }

  if ('CI' in process.env || 'TEAMCITY_VERSION' in process.env) {
    return 0;
  }

  if ('COLORTERM' in process.env) {
    return 1;
  }

  if (process.env.TERM === 'dumb') {
    return 0;
  }

  if (/^xterm-256(?:color)?/.test(process.env.TERM)) {
    return 2;
  }

  if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
    return 1;
  }

  return 0;
})();

if (supportLevel === 0 && 'FORCE_COLOR' in process.env) {
  supportLevel = 1;
}

const supportsColor = process && support(supportLevel);
/**
 * Terminal features.
 * @namespace
 */

const termNG = {
  /**
   * Supported terminal color depth.
   * @type {Object}
   * @property {Number} level  - 0 = None, 1 = Basic, 2 = 256 colors, 3 = 24 bit color
   * @property {Boolean} basic - Is there basic color support?
   * @property {Boolean} has256 - Terminal supports 256 colors
   * @property {Boolean} has16m - Terminal supports 16 million (24 bit) color
   */
  color: {
    level: supportsColor.level || 0,
    basic: supportsColor.hasBasic || false,
    hasBasic: supportsColor.hasBasic || false,
    has256: supportsColor.level >= 2,
    has16m: supportsColor.level >= 3
  },

  /**
   * Does the terminal support inline images?
   * @type {Boolean}
   * @example <caption>To set:</caption>
   * env TERM_IMAGES=enabled
   */
  images: process.env.TERM_IMAGES !== undefined && supportsColor.level >= 2,

  /**
   * Does the terminal support audio?
   * @type {Boolean}
   * @example <caption>To set:</caption>
   * env TERM_AUDIO=enabled
   */
  audio: process.env.TERM_AUDIO !== undefined,

  /**
   * Terminal font character set.
   * @type {Object}
   * @property {Boolean} basic    - Font has basic box drawing symbols.
   * @property {Boolean} enhanced - Font has 'full' Unicode character support
   * @example <caption>To set:</caption>
   * env TERM_FONT=[box|full]
   */
  font: {
    basic: process.env.TERM_FONT !== undefined,
    enhanced: process.env.TERM_FONT === 'full'
  },

  /**
   * Termcap support
   * @type {Object}
   * @property {Boolean} basic    - Using the default termcap.
   * @property {Boolean} enhanced - Using an enhanced/custom termcap.
   * @example <caption>To set:</caption>
   * env TERM_ENHANCED=enabled
   */
  termcap: {
    basic: process.env.TERM_ENHANCED !== undefined && process.env.TERM_ENHANCED === 'disabled',
    enhanced: process.env.TERM_ENHANCED === 'enabled'
  },

  /**
   * Name of running terminal software, i.e. 'iTerm.app'
   * @type {String}
   */
  software: process.env.TERM_PROGRAM || process.env.TERMKIT_HOST_APP || process.env.TERM || process.env.GULP
};

/* ────────╮
 │ Term-NG │ Next Generation Terminal Feature Exposure/Whitelisting
 ╰─────────┴──────────────────────────────────────────────────────────────────── */
const pkg = readPkg.sync(path.resolve(__dirname, '..'));
const clr = trucolor.simple({
  format: 'sgr'
});
const metadata = meta(__dirname);
const renderer = truwrap.truwrap({
  right: 0,
  outStream: process.stderr
});

const _yargs = yargs.strict().help(false).version(false).options({
  h: {
    alias: 'help',
    describe: 'Display this help.'
  },
  v: {
    alias: 'version',
    count: true,
    describe: 'Return the current version on stdout. -vv Return name & version.'
  },
  color: {
    describe: 'Force color depth --color=256|16m. Disable with --no-color'
  }
}).command('has-color', 'Is basic color supported?').command('has-256', 'Is 256 color supported?').command('has-16m', 'Is 24 bit color supported?').command('has-images', 'Are images supported? (set $TERM_IMAGES=enabled)').command('has-audio', 'Is audio supported? (set $TERM_AUDIO=enabled)').command('has-box-font', 'Is audio supported? (set $TERM_FONT=box)').command('has-full-font', 'Is audio supported? (set $TERM_FONT=full)').command('is-enhanced', 'Is the current terminal using an enhanced termcap? (set $TERM_ENHANCED=enabled)').command('user-agent', 'Print the current terminal software').wrap(renderer.getWidth());

const {
  argv
} = yargs;
const usage = `
${clr.title}term-ng${clr.title.out} ${clr.dim}v${pkg.version}${clr.dim.out}

Allow user configured enhanced terminal capabilities to be queried.

The command will exit with status 0 if all the provided queries (except user-agent) are true, otherwise exits with status 1.

If user-agent is used, the command will return the string on stdout and exit status 0.

${clr.title}Usage:${clr.title.out}
${clr.command}termng ${clr.option}[command]${clr.option.out}`;
const epilogue = `${clr.title}© 2016 The Bespoke Pixel. ${clr.grey}Released under the MIT License.${clr.grey.out}`;

if (!(process.env.USER === 'root' && process.env.SUDO_USER !== process.env.USER)) {
  updateNotifier({
    pkg
  }).notify();
}

if (argv.help) {
  renderer.write(usage);
  renderer.break(2);
  renderer.write(_yargs.getUsageInstance().help());
  renderer.break();
  renderer.write(epilogue);
  renderer.break(2);
  process.exit(0);
}

if (argv.version) {
  process.stdout.write(metadata.version(argv.version));
  process.exit(0);
}

if (argv._.indexOf('user-agent') !== -1) {
  process.stdout.write(termNG.software);
  process.exit(0);
}

const matrix = {
  'has-color': termNG.color.basic,
  'has-256': termNG.color.has256,
  'has-16m': termNG.color.has16m,
  'has-images': termNG.images,
  'has-audio': termNG.audio,
  'has-box-font': termNG.font.basic || termNG.font.enhanced,
  'has-full-font': termNG.font.enhanced,
  'is-enhanced': termNG.termcap.enhanced
};

argv._.forEach(query => {
  if (!matrix[query]) {
    process.exit(1);
  }
});
